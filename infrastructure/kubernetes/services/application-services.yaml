# Voice Gateway Service - Premium WebSocket + HTTP Service
apiVersion: v1
kind: Service
metadata:
  name: voice-gateway-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: voice-gateway
    tier: application
    service-type: premium
  annotations:
    description: "Voice Gateway Service - Real-time voice processing"
    performance-tier: "premium"
    sla-target: "99.5%"
    response-time-target: "<2s"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: websocket
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 8082
    targetPort: 8082
    protocol: TCP
  selector:
    app: gemini-salon
    component: voice-gateway
  sessionAffinity: ClientIP  # Sticky sessions for WebSocket connections
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800  # 3 hours for long voice sessions

---
# Notifier Service - Real-time Event Distribution
apiVersion: v1
kind: Service
metadata:
  name: notifier-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: notifier
    tier: application
    service-type: premium
  annotations:
    description: "Notifier Service - Real-time WebSocket event distribution"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: websocket
    port: 3001
    targetPort: 3001
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 3003
    targetPort: 3003
    protocol: TCP
  selector:
    app: gemini-salon
    component: notifier
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600  # 1 hour for dashboard connections

---
# n8n Bridge Service - Event to Webhook Bridge
apiVersion: v1
kind: Service
metadata:
  name: n8n-bridge-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: n8n-bridge
    tier: application
    service-type: standard
  annotations:
    description: "n8n Bridge Service - Event to webhook conversion"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3002
    targetPort: 3002
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 3004
    targetPort: 3004
    protocol: TCP
  selector:
    app: gemini-salon
    component: n8n-bridge

---
# Redis Service - High-Performance Caching
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: redis
    tier: data
    service-type: internal
  annotations:
    description: "Redis Service - High-performance caching and session store"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: 6379
    protocol: TCP
  - name: metrics
    port: 9121
    targetPort: 9121
    protocol: TCP
  selector:
    app: gemini-salon
    component: redis
  clusterIP: None  # Headless service for Redis

---
# n8n Workflows Service
apiVersion: v1
kind: Service
metadata:
  name: n8n-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: n8n
    tier: automation
    service-type: internal
  annotations:
    description: "n8n Workflows Service - Automation engine"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 5678
    targetPort: 5678
    protocol: TCP
  - name: health
    port: 5679
    targetPort: 5679
    protocol: TCP
  selector:
    app: gemini-salon
    component: n8n

---
# Frontend Service (Next.js)
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: frontend
    tier: presentation
    service-type: premium
  annotations:
    description: "Frontend Service - Next.js application"
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: health
    port: 3005
    targetPort: 3005
    protocol: TCP
  selector:
    app: gemini-salon
    component: frontend

---
# Prometheus Monitoring Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: prometheus
    tier: monitoring
    service-type: internal
  annotations:
    description: "Prometheus Service - Metrics collection and alerting"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: gemini-salon
    component: prometheus

---
# Grafana Dashboard Service
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: grafana
    tier: monitoring
    service-type: internal
  annotations:
    description: "Grafana Service - Monitoring dashboards"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 3000
    targetPort: 3000
    protocol: TCP
  selector:
    app: gemini-salon
    component: grafana

---
# External LoadBalancer for Public Access
apiVersion: v1
kind: Service
metadata:
  name: gemini-salon-loadbalancer
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: loadbalancer
    tier: network
    service-type: public
  annotations:
    description: "Main LoadBalancer - Public access point"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:eu-central-1:ACCOUNT:certificate/CERT-ID"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
    external-dns.alpha.kubernetes.io/hostname: "api.geminisalon.ai"
spec:
  type: LoadBalancer
  ports:
  - name: https
    port: 443
    targetPort: 8080
    protocol: TCP
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: websocket-voice
    port: 8081
    targetPort: 8081
    protocol: TCP
  - name: websocket-events
    port: 3001
    targetPort: 3001
    protocol: TCP
  selector:
    app: gemini-salon
    component: voice-gateway
  loadBalancerSourceRanges:
  - 0.0.0.0/0  # Adjust for production security
  externalTrafficPolicy: Local  # Preserve source IP for premium analytics

---
# Internal LoadBalancer for Admin/Monitoring Access
apiVersion: v1
kind: Service
metadata:
  name: gemini-salon-admin-lb
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: admin-loadbalancer
    tier: network
    service-type: internal
  annotations:
    description: "Admin LoadBalancer - Internal monitoring and admin access"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    external-dns.alpha.kubernetes.io/hostname: "admin.geminisalon.ai"
spec:
  type: LoadBalancer
  ports:
  - name: grafana
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: prometheus
    port: 9090
    targetPort: 9090
    protocol: TCP
  - name: n8n
    port: 5678
    targetPort: 5678
    protocol: TCP
  selector:
    app: gemini-salon
    component: grafana
  loadBalancerSourceRanges:
  - 10.0.0.0/16  # VPC CIDR - restrict admin access
  externalTrafficPolicy: Local