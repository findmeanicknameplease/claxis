# IMPORTANT: This is a template file. Actual secrets should be managed via:
# 1. External secret management (Vault, AWS Secrets Manager, etc.)
# 2. Sealed Secrets or similar GitOps-friendly solutions
# 3. Manual kubectl create secret commands with proper RBAC

apiVersion: v1
kind: Secret
metadata:
  name: gemini-salon-secrets
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: secrets
    data-classification: confidential
  annotations:
    description: "Application secrets for Gemini Salon AI"
    rotation-schedule: "90d"
    last-rotated: "2024-12-19T00:00:00Z"
type: Opaque
stringData:
  # Database Credentials (Base64 encoded in production)
  DATABASE_URL: "postgresql://username:password@host:5432/database?sslmode=require"
  SUPABASE_URL: "https://your-project.supabase.co"
  SUPABASE_ANON_KEY: "your-anon-key"
  SUPABASE_SERVICE_KEY: "your-service-key"
  
  # JWT Configuration
  JWT_SECRET: "your-jwt-secret-min-32-chars"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRES_IN: "24h"
  
  # Voice Services API Keys
  TWILIO_ACCOUNT_SID: "your-twilio-account-sid"
  TWILIO_AUTH_TOKEN: "your-twilio-auth-token"
  TWILIO_PHONE_NUMBER: "your-twilio-phone-number"
  
  ELEVENLABS_API_KEY: "your-elevenlabs-api-key"
  ELEVENLABS_VOICE_ID: "your-voice-id"
  
  # WhatsApp Business API
  WHATSAPP_ACCESS_TOKEN: "your-whatsapp-access-token"
  WHATSAPP_PHONE_NUMBER_ID: "your-phone-number-id"
  WHATSAPP_WEBHOOK_VERIFY_TOKEN: "your-webhook-verify-token"
  
  # Instagram Graph API
  INSTAGRAM_ACCESS_TOKEN: "your-instagram-access-token"
  INSTAGRAM_APP_SECRET: "your-instagram-app-secret"
  
  # Redis Authentication
  REDIS_PASSWORD: "your-redis-password"
  
  # n8n Configuration
  N8N_ENCRYPTION_KEY: "your-n8n-encryption-key"
  N8N_WEBHOOK_URL: "https://n8n.geminisalon.ai"
  
  # Monitoring & Observability
  GRAFANA_ADMIN_PASSWORD: "your-grafana-admin-password"
  ALERTMANAGER_SLACK_WEBHOOK: "your-slack-webhook-url"
  SENTRY_DSN: "your-sentry-dsn"
  
  # External Services
  OPENAI_API_KEY: "your-openai-api-key"
  GOOGLE_AI_API_KEY: "your-google-ai-api-key"
  
  # Backup & Storage
  S3_ACCESS_KEY: "your-s3-access-key"
  S3_SECRET_KEY: "your-s3-secret-key"
  S3_BUCKET: "gemini-salon-backups-eu"
  S3_REGION: "eu-central-1"

---
# TLS Certificates (Let's Encrypt or Custom CA)
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: tls
type: kubernetes.io/tls
data:
  # Base64 encoded certificate and key
  tls.crt: LS0tLS1CRUdJTi... # Your certificate
  tls.key: LS0tLS1CRUdJTi... # Your private key

---
# Docker Registry Credentials (if using private registry)
apiVersion: v1
kind: Secret
metadata:
  name: regcred
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: |
    {
      "auths": {
        "your-registry.com": {
          "username": "your-username",
          "password": "your-password",
          "email": "your-email",
          "auth": "base64-encoded-username:password"
        }
      }
    }

---
# Service Account for RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gemini-salon-service-account
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: rbac
automountServiceAccountToken: true
imagePullSecrets:
- name: regcred

---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: gemini-salon
  name: gemini-salon-role
  labels:
    app: gemini-salon
    component: rbac
rules:
# Allow reading secrets for configuration
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
# Allow reading configmaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
# Allow pod operations for auto-scaling
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
# Allow service discovery
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gemini-salon-role-binding
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: rbac
subjects:
- kind: ServiceAccount
  name: gemini-salon-service-account
  namespace: gemini-salon
roleRef:
  kind: Role
  name: gemini-salon-role
  apiGroup: rbac.authorization.k8s.io