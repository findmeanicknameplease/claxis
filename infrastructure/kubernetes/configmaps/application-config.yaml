apiVersion: v1
kind: ConfigMap
metadata:
  name: gemini-salon-config
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: configuration
    tier: production
data:
  # Application Environment
  NODE_ENV: "production"
  APP_ENV: "production"
  
  # Logging Configuration
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  STRUCTURED_LOGGING: "true"
  
  # Performance Configuration
  MAX_CONNECTIONS: "1000"
  CONNECTION_TIMEOUT: "30000"
  REQUEST_TIMEOUT: "120000"
  KEEP_ALIVE_TIMEOUT: "65000"
  
  # Database Configuration (Non-sensitive)
  DB_POOL_MIN: "5"
  DB_POOL_MAX: "20"
  DB_IDLE_TIMEOUT: "10000"
  DB_CONNECTION_TIMEOUT: "60000"
  DB_STATEMENT_TIMEOUT: "30000"
  
  # Redis Configuration
  REDIS_HOST: "redis-service.gemini-salon.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_RETRY_ATTEMPTS: "3"
  REDIS_RETRY_DELAY: "1000"
  
  # WebSocket Configuration
  WS_HEARTBEAT_INTERVAL: "30000"
  WS_CONNECTION_LIMIT: "10000"
  WS_MESSAGE_SIZE_LIMIT: "10485760"  # 10MB
  WS_RATE_LIMIT: "100"  # messages per minute
  
  # Voice Gateway Configuration
  VOICE_GATEWAY_PORT: "8080"
  VOICE_GATEWAY_HOST: "0.0.0.0"
  MAX_CONCURRENT_CALLS: "500"
  CALL_TIMEOUT: "300000"  # 5 minutes
  
  # n8n Configuration
  N8N_HOST: "n8n-service.gemini-salon.svc.cluster.local"
  N8N_PORT: "5678"
  N8N_PROTOCOL: "http"
  N8N_WEBHOOK_TIMEOUT: "30000"
  
  # Monitoring Configuration
  METRICS_PORT: "9090"
  HEALTH_CHECK_PORT: "8081"
  PROMETHEUS_ENABLED: "true"
  JAEGER_ENABLED: "true"
  
  # Security Configuration
  CORS_ORIGINS: "https://app.geminisalon.ai,https://admin.geminisalon.ai"
  RATE_LIMIT_WINDOW: "60000"  # 1 minute
  RATE_LIMIT_MAX: "100"  # requests per window
  HELMET_ENABLED: "true"
  
  # GDPR Compliance
  DATA_RETENTION_DAYS: "365"
  AUDIT_LOG_ENABLED: "true"
  ANONYMIZATION_ENABLED: "true"
  CONSENT_VALIDATION_ENABLED: "true"
  
  # Feature Flags
  VOICE_AGENT_ENABLED: "true"
  MULTILINGUAL_SUPPORT: "true"
  ADVANCED_ANALYTICS: "true"
  PREMIUM_FEATURES: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging format for premium analytics
        log_format json_combined escape=json
          '{'
            '"time_local":"$time_local",'
            '"remote_addr":"$remote_addr",'
            '"remote_user":"$remote_user",'
            '"request":"$request",'
            '"status": "$status",'
            '"body_bytes_sent":"$body_bytes_sent",'
            '"request_time":"$request_time",'
            '"http_referrer":"$http_referer",'
            '"http_user_agent":"$http_user_agent",'
            '"http_x_forwarded_for":"$http_x_forwarded_for",'
            '"upstream_response_time":"$upstream_response_time"'
          '}';
        
        access_log /var/log/nginx/access.log json_combined;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;
        
        # Gzip compression for premium performance
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
          application/json
          application/javascript
          application/xml+rss
          application/atom+xml
          image/svg+xml
          text/plain
          text/css
          text/xml
          text/javascript;
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
        add_header Content-Security-Policy "default-src 'self'";
        
        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=websocket:10m rate=30r/s;
        
        # Upstream definitions
        upstream voice_gateway {
            least_conn;
            server voice-gateway-service:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream notifier_service {
            least_conn;
            server notifier-service:3001 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        upstream n8n_bridge {
            least_conn;
            server n8n-bridge-service:3002 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'gemini-salon-prod'
        region: 'eu-central-1'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      # Kubernetes API server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https
      
      # Application services
      - job_name: 'voice-gateway'
        static_configs:
          - targets: ['voice-gateway-service:9090']
        scrape_interval: 5s
        metrics_path: /metrics
      
      - job_name: 'notifier-service'
        static_configs:
          - targets: ['notifier-service:9090']
        scrape_interval: 5s
        metrics_path: /metrics
      
      - job_name: 'n8n-bridge'
        static_configs:
          - targets: ['n8n-bridge-service:9090']
        scrape_interval: 5s
        metrics_path: /metrics
      
      # Node exporter for infrastructure metrics
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
        - source_labels: [__address__]
          regex: '(.*):10250'
          target_label: __address__
          replacement: '${1}:9100'
        - source_labels: [__meta_kubernetes_node_name]
          target_label: instance