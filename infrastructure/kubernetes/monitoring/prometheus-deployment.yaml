# Prometheus - Enterprise Metrics Collection
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: prometheus
    tier: monitoring
    version: "2.47.0"
  annotations:
    description: "Prometheus - Enterprise metrics collection and alerting"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Prometheus with persistent storage
  selector:
    matchLabels:
      app: gemini-salon
      component: prometheus
  template:
    metadata:
      labels:
        app: gemini-salon
        component: prometheus
        tier: monitoring
        version: "2.47.0"
    spec:
      serviceAccountName: prometheus-service-account
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534  # nobody user
        runAsGroup: 65534
        fsGroup: 65534
      
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: IfNotPresent
        
        resources:
          requests:
            cpu: 500m
            memory: 2Gi
          limits:
            cpu: 2000m
            memory: 8Gi
        
        args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus/
        - --storage.tsdb.retention.time=90d
        - --storage.tsdb.retention.size=45GB
        - --web.console.libraries=/etc/prometheus/console_libraries
        - --web.console.templates=/etc/prometheus/consoles
        - --web.enable-lifecycle
        - --web.enable-admin-api
        - --web.route-prefix=/
        - --web.external-url=https://prometheus.geminisalon.ai
        - --log.level=info
        - --log.format=json
        
        ports:
        - name: http
          containerPort: 9090
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage
          mountPath: /prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-pvc
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      
      terminationGracePeriodSeconds: 60

---
# Grafana - Premium Dashboards
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: grafana
    tier: monitoring
    version: "10.2.0"
  annotations:
    description: "Grafana - Premium monitoring dashboards and business intelligence"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gemini-salon
      component: grafana
  template:
    metadata:
      labels:
        app: gemini-salon
        component: grafana
        tier: monitoring
        version: "10.2.0"
    spec:
      serviceAccountName: gemini-salon-service-account
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 472  # grafana user
        runAsGroup: 472
        fsGroup: 472
      
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        imagePullPolicy: IfNotPresent
        
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        
        env:
        # Security Configuration
        - name: GF_SECURITY_ADMIN_USER
          value: "admin"
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gemini-salon-secrets
              key: GRAFANA_ADMIN_PASSWORD
        - name: GF_SECURITY_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: gemini-salon-secrets
              key: GRAFANA_SECRET_KEY
        
        # Server Configuration
        - name: GF_SERVER_PROTOCOL
          value: "http"
        - name: GF_SERVER_HTTP_PORT
          value: "3000"
        - name: GF_SERVER_DOMAIN
          value: "grafana.geminisalon.ai"
        - name: GF_SERVER_ROOT_URL
          value: "https://grafana.geminisalon.ai"
        
        # Database Configuration (PostgreSQL)
        - name: GF_DATABASE_TYPE
          value: "postgres"
        - name: GF_DATABASE_HOST
          value: "supabase-host:5432"
        - name: GF_DATABASE_NAME
          value: "grafana"
        - name: GF_DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: gemini-salon-secrets
              key: GRAFANA_DB_USER
        - name: GF_DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: gemini-salon-secrets
              key: GRAFANA_DB_PASSWORD
        - name: GF_DATABASE_SSL_MODE
          value: "require"
        
        # Enterprise Features
        - name: GF_ANALYTICS_REPORTING_ENABLED
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_UPDATES
          value: "false"
        - name: GF_ANALYTICS_CHECK_FOR_PLUGIN_UPDATES
          value: "false"
        - name: GF_USERS_ALLOW_SIGN_UP
          value: "false"
        - name: GF_USERS_AUTO_ASSIGN_ORG
          value: "true"
        - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
          value: "Viewer"
        
        # Logging Configuration
        - name: GF_LOG_MODE
          value: "console"
        - name: GF_LOG_LEVEL
          value: "info"
        - name: GF_LOG_FORMAT
          value: "json"
        
        # Alerting Configuration
        - name: GF_ALERTING_ENABLED
          value: "true"
        - name: GF_UNIFIED_ALERTING_ENABLED
          value: "true"
        
        # Plugin Configuration
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel,camptocamp-prometheus-alertmanager-datasource"
        
        ports:
        - name: http
          containerPort: 3000
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Grafana needs write access
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      
      terminationGracePeriodSeconds: 30

---
# AlertManager - Enterprise Alerting
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager-deployment
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: alertmanager
    tier: monitoring
    version: "0.26.0"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: gemini-salon
      component: alertmanager
  template:
    metadata:
      labels:
        app: gemini-salon
        component: alertmanager
        tier: monitoring
        version: "0.26.0"
    spec:
      serviceAccountName: gemini-salon-service-account
      
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.26.0
        imagePullPolicy: IfNotPresent
        
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        
        args:
        - --config.file=/etc/alertmanager/alertmanager.yml
        - --storage.path=/alertmanager
        - --web.external-url=https://alertmanager.geminisalon.ai
        - --web.route-prefix=/
        - --cluster.listen-address=
        - --log.level=info
        - --log.format=json
        
        ports:
        - name: http
          containerPort: 9093
        
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 30
          periodSeconds: 15
        
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
        
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager
        - name: alertmanager-storage
          mountPath: /alertmanager
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        persistentVolumeClaim:
          claimName: alertmanager-pvc
      
      terminationGracePeriodSeconds: 30

---
# Additional Storage Claims for Monitoring
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: grafana
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard-ssd
  resources:
    requests:
      storage: 10Gi

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-pvc
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: alertmanager
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard-ssd
  resources:
    requests:
      storage: 5Gi

---
# RBAC for Prometheus
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-service-account
  namespace: gemini-salon
  labels:
    app: gemini-salon
    component: prometheus

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-cluster-role
  labels:
    app: gemini-salon
    component: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cluster-role-binding
  labels:
    app: gemini-salon
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cluster-role
subjects:
- kind: ServiceAccount
  name: prometheus-service-account
  namespace: gemini-salon