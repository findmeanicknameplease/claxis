{
  "name": "Missed Call Auto-Callback Workflow",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 2
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Callback Queue Check",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [
        100,
        200
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.VOICE_GATEWAY_URL }}/callbacks/process",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "={{ $env.SERVICE_API_KEY }}"
            },
            {
              "name": "Content-Type", 
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "limit",
              "value": "10"
            }
          ]
        },
        "options": {
          "timeout": 30000,
          "retry": {
            "enabled": true,
            "maxTries": 3
          }
        }
      },
      "id": "process-callbacks",
      "name": "Process Callback Queue",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        300,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.processed }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-callbacks-processed",
      "name": "Callbacks Processed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        500,
        200
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "={{ $env.SUPABASE_DATABASE_ID }}",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "callback_processing_logs",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_type": "callback_queue_processed",
            "processed_count": "={{ $json.processed }}",
            "results": "={{ JSON.stringify($json.results) }}",
            "timestamp": "={{ new Date().toISOString() }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "log-processing-results",
      "name": "Log Processing Results",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        700,
        150
      ]
    },
    {
      "parameters": {
        "operation": "getMany",
        "base": {
          "__rl": true,
          "value": "={{ $env.SUPABASE_DATABASE_ID }}",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "callback_queue",
          "mode": "list"
        },
        "select": "id,phone_number,salon_id,campaign_type,status,attempts,max_attempts,process_after,customer_context",
        "filterType": "manual",
        "filters": {
          "conditions": [
            {
              "keyName": "status",
              "operator": "eq",
              "keyValue": "failed"
            },
            {
              "keyName": "updated_at",
              "operator": "gte", 
              "keyValue": "={{ new Date(Date.now() - 60*60*1000).toISOString() }}"
            }
          ]
        },
        "options": {
          "limit": 50
        }
      },
      "id": "check-failed-callbacks",
      "name": "Check Failed Callbacks",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        700,
        250
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number", 
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-failed-callbacks",
      "name": "Failed Callbacks Found?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        900,
        250
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1", 
              "leftValue": "={{ $json.attempts }}",
              "rightValue": "={{ $json.max_attempts }}",
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-max-attempts",
      "name": "Max Attempts Reached?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1100,
        250
      ]
    },
    {
      "parameters": {
        "url": "={{ $env.N8N_WEBHOOK_BASE_URL }}/callback-failed-alert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"event_type\": \"callback_max_attempts_reached\",\n  \"queue_id\": \"{{ $json.id }}\",\n  \"phone_number\": \"{{ $json.phone_number }}\",\n  \"salon_id\": \"{{ $json.salon_id }}\",\n  \"campaign_type\": \"{{ $json.campaign_type }}\",\n  \"attempts\": {{ $json.attempts }},\n  \"customer_context\": {{ JSON.stringify($json.customer_context) }},\n  \"timestamp\": \"{{ new Date().toISOString() }}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "id": "alert-failed-callback",
      "name": "Alert Failed Callback",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1300,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $('Process Callback Queue').item.json.success }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "if-processing-failed",
      "name": "Processing Failed?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        500,
        350
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "={{ $env.SUPABASE_DATABASE_ID }}",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "callback_processing_logs",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "event_type": "callback_processing_error",
            "error_message": "={{ $('Process Callback Queue').item.json.error || 'Unknown error' }}",
            "error_details": "={{ JSON.stringify($('Process Callback Queue').item.json) }}",
            "timestamp": "={{ new Date().toISOString() }}"
          },
          "matchingColumns": [],
          "schema": []
        },
        "options": {}
      },
      "id": "log-processing-error",
      "name": "Log Processing Error",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        700,
        350
      ]
    }
  ],
  "connections": {
    "Callback Queue Check": {
      "main": [
        [
          {
            "node": "Process Callback Queue",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Callback Queue": {
      "main": [
        [
          {
            "node": "Callbacks Processed?",
            "type": "main",
            "index": 0
          },
          {
            "node": "Processing Failed?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Callbacks Processed?": {
      "main": [
        [
          {
            "node": "Log Processing Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Failed Callbacks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Failed Callbacks": {
      "main": [
        [
          {
            "node": "Failed Callbacks Found?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Callbacks Found?": {
      "main": [
        [
          {
            "node": "Max Attempts Reached?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Max Attempts Reached?": {
      "main": [
        [
          {
            "node": "Alert Failed Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processing Failed?": {
      "main": [
        [
          {
            "node": "Log Processing Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-06-18T10:00:00.000Z",
      "updatedAt": "2024-06-18T10:00:00.000Z",
      "id": "voice-agent",
      "name": "voice-agent"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-06-18T10:00:00.000Z",
  "versionId": "v1"
}